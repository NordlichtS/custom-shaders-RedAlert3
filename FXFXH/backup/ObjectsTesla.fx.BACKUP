//for batch compiling

// #define FORBID_CLIPPING_CONSTANT //只有强制开 ALPHA TEST 的可以开
//  #define USE_SPECIAL_PBR_W3X_CONSTANT
// #define REPLACE_DEFAULT_TECHNIQUE //only for objects terrain
// #define COMPILE_SOFTSKIN_VS //USUALLY OFF
// 上面的最好别乱动 dont change any above 

// #define FORBID_FACTION_COLOR //中立单位要禁止阵营色 generic on
// #define DYNAMIC_CLOUD_REF //允许动态云背景反射。对金属和玻璃质感很重要 仅玩家
// #define ALLOW_STEALTH //允许隐身时有特殊的全息投影特效, player object only ! 建筑和中立都关
// #define RENDER_BACKFACE //only for tengu, objectsjapan
//#define FORBID_SHADOW_ALPHATEST


// #define OPACITY_OVERRIDE_CLIP  //仅玩家的OBJECT开? NO JUST TURN OFF ALL
 #define OPACITY_OVERRIDE_OUTPUT //玩家的OBJECT和BUILDING 开
// #define ALLOW_CLIP_TEXTURE_ALPHA //允许贴图alpha镂空。on for all
// #define FORCE_ENABLE_ALPHA_CLIP_BEFORE_RETURN //应该都关
// #define KEEP_ALPHA_TEXTURE_SAMPLER_SAME  //仅建筑
//  #define DAMAGE_BURNRED  //烧红效果看情况吧
// #define SHADOW_DITHER //just like terrain


//下面三个互相冲突的（顶点ALPHA功能）功能只能选一个
// #define ALLOW_CLIP_VERTEX_ALPHA //允许骨骼透明度隐藏零件。building不要。objects ? 
// #define IS_BUILDNG //仅building要。这是损伤破洞功能。与上下两者冲突 不可同时用
// #define IS_NANO_BUILDUP  //启用帝国建筑的建造动画。 与上两者冲突 不可同时用




#define SUPPORT_TESLA

/*
texture FractalNormalMap 
<string UIWidget = "None"; string SasBindAddress = "WW3D.FXDistortionFractal";>; //256 size
sampler2D FractalNormalMapSampler 
<string Texture = "FractalNormalMap";  string SasBindAddress = "WW3D.FXDistortionFractal";> = sampler_state
{
    Texture = <FractalNormalMap>; 
    MinFilter = 2;
    MagFilter = 2;
    MipFilter = 2;
    AddressU = 1;
    AddressV = 1;
};

texture TeslaTexture 
<string UIWidget = "None"; string SasBindAddress = "WW3D.FXLightningTeslaHit";>; //512 size
sampler2D TeslaTextureSampler 
<string Texture = "TeslaTexture";  string SasBindAddress = "WW3D.FXLightningTeslaHit";> = sampler_state
{
    Texture = <TeslaTexture>; 
    MipFilter = 2;
    MinFilter = 2;
    MagFilter = 2;
    AddressU = 2; // 1=loop, 2=mirror, 3=clamp, 4=border
    AddressV = 2;
};

float3 getTeslaMap(float2 vpos, float time, float eyetilt)
{
    float4 nrmUVwithLOD = 0;
    nrmUVwithLOD.xy = vpos / 256 ;
    //nrmUVwithLOD.y += time ;
    //nrmUVwithLOD.w = eyetilt * 3 ;
    float2 deviation = tex2D(FractalNormalMapSampler, nrmUVwithLOD.xy).xy - 0.5 ;
    float2 teslaUV = float2(time, (eyetilt * eyetilt))  ;
    teslaUV += deviation ;
    float3 teslacolor = tex2D(TeslaTextureSampler, teslaUV).xyz;
    teslacolor *= lerp( 1 , (teslacolor * teslacolor * 0.25) , eyetilt);
    float3 extralightedge = float3(1, 2, 4) ;
    extralightedge *= saturate(0.125 - eyetilt) ;

    return teslacolor + extralightedge ;
}
*/

float tempRandom(float seed)
{
    float4 trim = frac(seed.xxxx / float4(0.2, 0.3, 0.5, 0.7)) ;
    trim = abs(trim *2 -1 );
    return dot(trim, 0.25);
}

float3 getTeslaMap(float2 nrmuv, float time, float eyetilt)
{
    float3 teslacolor = float3(0.125, 0.25, 1);

    float rand1 = tempRandom( time + eyetilt );  // 0--1
    float fbase = 1 - eyetilt ;
    float1 ripple = rand1 + fbase - 1  ;
    ripple = saturate(ripple);

    return teslacolor * ripple  ;
}


#include "PBR5-10-objects-ARPBR.FX"


/*
//this is : objectstesla.fxo
fxc.exe /O2 /T fx_2_0 /Fo   objectstesla.fxo   objectstesla.fx

*/